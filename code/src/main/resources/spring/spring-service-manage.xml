<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
   http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
   http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd">
   
    <!-- 将数据源映射到sqlSessionFactory中  MyBatis-->
    <bean id="manage_sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    	<!-- MyBatis和Spring整合的配置 -->
		<!-- 注入数据库连接池 -->
        <property name="dataSource" ref="manage_dataSource" />
        <!-- 配置MyBatis全局配置文件 -->
		<property name="configLocation" value="classpath:mybatis/mybatis-config.xml" />
        <!-- 扫描entity包，使用别名 -->
		<!-- <property name="typeAliasesPackage" value="com.coolshow.fox.manage.*.po" /> -->
		<!-- 扫描sql配置文件：mapper需要的xml文件 -->
		<property name="mapperLocations" >
			<list>
				<value>classpath*:com/yuntu/sale/manage/dao/*/mapper/*.xml</value>
				<value>classpath*:com/yuntu/sale/user/dao/mapper/*.xml</value>
				<value>classpath*:com/yuntu/sale/info/dao/mapper/*.xml</value>
				<value>classpath*:com/yuntu/sale/capital/dao/mapper/*.xml</value>
				<value>classpath*:com/yuntu/sale/product/dao/mapper/*.xml</value>
				<value>classpath*:com/yuntu/sale/orders/dao/mapper/*.xml</value>
				<value>classpath*:com/yuntu/sale/report/dao/mapper/*.xml</value>
				<value>classpath*:com/yuntu/sale/ifconf/dao/mapper/*.xml</value>
				<value>classpath*:com/yuntu/sale/chiefly/dao/mapper/*.xml</value>
				<value>classpath*:com/yuntu/sale/finance/dao/mapper/*.xml</value>
			</list>
		</property>
        <property name="plugins">
			<array>
				<bean class="com.github.pagehelper.PageHelper">
					<property name="properties">
						<value>
							dialect=mysql
						</value>
					</property>
				</bean>
			</array>
		</property>
    </bean>
    
    <!-- 配置扫描Dao接口包：动态实现Dao接口，并注入到spring容器中 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 注入sqlSessionFactory -->
		<property name="sqlSessionFactoryBeanName" value="manage_sqlSessionFactory" />
		<!-- 给出需要扫描Dao接口包 -->
		<property name="basePackage" value="com.yuntu.sale.manage.dao.*, com.yuntu.sale.*.dao" />
	</bean>
    
    <!-- 配置事务管理器 -->
	<bean id="manage_transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="manage_dataSource" />
	</bean>
    
	<!-- 配置事务的传播特性  -->
	<tx:advice id="txAdvice_manage" transaction-manager="manage_transactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="save*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="edit*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="modify*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="update*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="remove*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="set*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="do*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="get*" read-only="true" />
			<tx:method name="*" read-only="true"/>
		</tx:attributes>
	</tx:advice>
	
	<!-- 配置事务切面 -->
	<aop:config>
		<aop:advisor pointcut="execution(* com.yuntu.sale.manage.service.*.impl.*.*(..))" advice-ref="txAdvice_manage" />
		<aop:advisor pointcut="execution(* com.yuntu.sale.*.service.impl.*.*(..))" advice-ref="txAdvice_manage" />
	</aop:config>
	
	<!-- 开启AOP监听 只对当前配置文件有效 -->
	<aop:aspectj-autoproxy expose-proxy="true" />
	
</beans>